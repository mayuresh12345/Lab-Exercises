%{
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#define YY_DECL struct token *yylex(void)
	enum tokenType {EOFILE = -1, LESS_THAN, LESS_THAN_OR_EQUAL, GREATER_THAN, GREATER_THAN_OR_EQUAL, EQUAL, NOT_EQUAL};
	struct token
	{
		char *lexeme;
		int index;
		unsigned int rowno, colno;
		enum tokenType type;
	};
	int lineno = 1, colno = 1;
	struct token *tk;
	struct token *allocToken()
	{
		struct token* tk;
		tk = (struct token *)malloc(sizeof(struct token));
		tk->lexeme = (char *)malloc(sizeof(char) * 3);
		tk->index = -1;
		tk->type = EOFILE;
		return tk;
	}
	void setTokenArgs(struct token *tk, char *lexeme, int index, int rowno, int colno, enum tokenType type)
	{
		if(tk == NULL)
			return ;
		strcpy(tk->lexeme, lexeme);
		tk->index = index;
		tk->rowno = rowno;
		tk->colno = colno;
		tk->type = type;
	}
%}
%%
"/*".*"*/" { int i = 0;
while(yytext[i] != '\0')
{
	if(yytext[i] == '\n')
	{
		lineno++;
		colno = 1;
	}
	else
		colno++;
	i++;
}
}
"//".*"\n" {lineno++; colno = 1;}
(\"(.)*\") {printf("123  %s\n", yytext); colno += strlen(yytext);}
(\'(.)\') {colno += strlen(yytext);}
\n {lineno++; colno = 1;}

"<" {
	tk=allocToken();
	setTokenArgs(tk,yytext,-1, lineno, colno, LESS_THAN);
	colno++ ; 
	return tk ; 
	}

"<=" {
	tk = allocToken() ; 
	setTokenArgs(tk,yytext,-1,lineno,colno,LESS_THAN_OR_EQUAL);
	colno+=2 ; 
	return tk ; 
}

">" {
	tk=allocToken();
	setTokenArgs(tk,yytext,-1, lineno, colno, GREATER_THAN);
	colno++ ; 
	return tk ; 
	}

">=" {
	tk = allocToken() ; 
	setTokenArgs(tk,yytext,-1,lineno,colno,GREATER_THAN_OR_EQUAL);
	colno+=2 ; 
	return tk ; 	
}

"==" {
	tk = allocToken() ; 
	setTokenArgs(tk,yytext,-1,lineno,colno,EQUAL);
	colno+=2 ; 
	return tk ; 
}

"!=" {
	tk = allocToken() ; 
	setTokenArgs(tk,yytext,-1,lineno,colno,NOT_EQUAL);
	colno+=2 ; 
	return tk ; 	
}

"\t" {colno+=8; }

. {colno++;}
%%
int main()
{
	yyin = fopen("input.c", "r");
	int count = 0;
	while((tk = yylex()))
	{
		printf("%d\t%d\t%d\t%s\n", count, tk->rowno, tk->colno, tk->lexeme);
	}
	return 0;
}
int yywrap()
{
	return 1;
}