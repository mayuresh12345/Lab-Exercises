#include <stdio.h>
#include <CL/cl.h>
#include<stdlib.h>

//Max source size of the kernel string
#define MAX_SOURCE_SIZE (0x100000)

int main(void){
	// Create the two input vectors
	int i;
	int LIST_SIZE = 102400;
	printf("Enter how many elements:");
	scanf("%d",&LIST_SIZE);
	int *A = (int*) malloc (sizeof (int) * LIST_SIZE);

	printf("Enter the values\n");

	//Initialize the input vectors
	for(i = 0; i < LIST_SIZE; i++){
		scanf("%d", &A[i]); //if LIST_SIZE is very large
	}
	int *B = (int*)malloc(sizeof(int)*LIST_SIZE);

	//Initialize the input vectors
	for(i = 0; i < LIST_SIZE; i++){
		B[i] = i+10;
	}

	// Load the kernel source code into the array source_str
	FILE *fp, *fp2;
	char *source_str, *source_str2;
	size_t source_size, source_size2;
	fp = fopen("oddEven.cl", "r");
	fp2 = fopen("evenOdd.cl", "r");

	if (!fp){
		fprintf(stderr, "Failed to load kernel.\n");
		getchar();
		exit(1);
	}
	if (!fp2){
			fprintf(stderr, "Failed to load kernel.\n");
			getchar();
			exit(1);
		}

	source_str = (char*)malloc(MAX_SOURCE_SIZE);
	source_size = fread( source_str, 1, MAX_SOURCE_SIZE, fp);
	fclose( fp );

//	source_str2 = (char*)malloc(MAX_SOURCE_SIZE);
//		source_size2 = fread( source_str2, 1, MAX_SOURCE_SIZE, fp2);
//		fclose( fp2 );

	// Get platform and device information
	cl_platform_id platform_id = NULL;
	cl_device_id device_id = NULL;
	cl_uint ret_num_devices;



	cl_uint ret_num_platforms;

	cl_int ret = clGetPlatformIDs(1, &platform_id, &ret_num_platforms);
	ret = clGetDeviceIDs( platform_id, CL_DEVICE_TYPE_GPU, 1,&device_id,&ret_num_devices);

	// Create an OpenCL context
	cl_context context = clCreateContext( NULL, 1, &device_id, NULL, NULL,&ret);

	// Create a command queue
	cl_command_queue command_queue = clCreateCommandQueue(context, device_id, NULL, &ret);

	// Create memory buffers on the device for each vector A, B and C
	cl_mem a_mem_obj = clCreateBuffer(context,CL_MEM_READ_WRITE,LIST_SIZE * sizeof(int), NULL, &ret);
	//cl_mem b_mem_obj = clCreateBuffer(context,CL_MEM_READ_ONLY,LIST_SIZE * sizeof(int), NULL, &ret);
	//cl_mem c_mem_obj = clCreateBuffer(context,CL_MEM_WRITE_ONLY,LIST_SIZE * sizeof(int), NULL, &ret);

	// Copy the lists A and B to their respective memory buffers
	ret = clEnqueueWriteBuffer(command_queue, a_mem_obj, CL_TRUE,0,LIST_SIZE * sizeof(int), A, 0, NULL, NULL);
	//ret = clEnqueueWriteBuffer(command_queue, b_mem_obj, CL_TRUE,0,LIST_SIZE * sizeof(int), B, 0, NULL, NULL);

	// Create a program from the kernel source
	cl_program program = clCreateProgramWithSource(context, 1, (const char**)&source_str, (const size_t *)&source_size, &ret);
//	cl_program program2 = clCreateProgramWithSource(context, 1, (const char**)&source_str2, (const size_t *)&source_size2, &ret);

	// Build the program
	ret = clBuildProgram(program, 1, &device_id, NULL, NULL, NULL);
//	ret = clBuildProgram(program2, 1, &device_id, NULL, NULL, NULL);

	// Create the OpenCL kernel object
	cl_kernel kernel = clCreateKernel(program, "oddEven", &ret);
	cl_kernel kernel2 = clCreateKernel(program, "evenOdd", &ret);

	// Set the arguments of the kernel
	ret = clSetKernelArg(kernel, 0, sizeof(cl_mem), (void *)&a_mem_obj);
	ret = clSetKernelArg(kernel2, 0, sizeof(cl_mem), (void *)&a_mem_obj);

	// Execute the OpenCL kernel on the array
	size_t global_item_size = LIST_SIZE;
	size_t local_item_size = 1;

	//Execute the kernel on the device
	cl_event event;

	// Read the memory buffer C on the device to the local variable C
	int *C = (int*)malloc(sizeof(int)*LIST_SIZE);
	ret = clEnqueueReadBuffer(command_queue, a_mem_obj, CL_TRUE, 0,LIST_SIZE* sizeof(int), A, 0, NULL, NULL);

		for(int i = 0; i < LIST_SIZE/2; i++)
		{
			ret = clEnqueueNDRangeKernel(command_queue, kernel, 1, NULL,&global_item_size, &local_item_size, 0, NULL, NULL);

			ret = clFinish(command_queue);
			ret = clEnqueueNDRangeKernel(command_queue, kernel2, 1, NULL,&global_item_size, &local_item_size, 0, NULL, NULL);
			ret = clFinish(command_queue);
		}

	// Display the result to the screen
	for(i = 0; i < LIST_SIZE; i++)
	printf("%d\t", A[i]);

	// Clean up
	ret = clFlush(command_queue);
	ret = clReleaseKernel(kernel);
	ret = clReleaseProgram(program);
	ret = clReleaseMemObject(a_mem_obj);
	ret = clReleaseCommandQueue(command_queue);
	ret = clReleaseContext(context);
	free(A);
	free(B);
	free(C);
	getchar();
	return 0;
}
